/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-06-22")
public class User implements org.apache.thrift.TBase<User, User._Fields>, java.io.Serializable, Cloneable, Comparable<User> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("User");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ID_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("idName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField COMPANY_ID_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("companyIdName", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UserStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UserTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable String id; // required
  public @org.apache.thrift.annotation.Nullable String idName; // required
  public @org.apache.thrift.annotation.Nullable String companyId; // required
  public @org.apache.thrift.annotation.Nullable String companyIdName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    ID_NAME((short)2, "idName"),
    COMPANY_ID((short)3, "companyId"),
    COMPANY_ID_NAME((short)4, "companyIdName");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // ID_NAME
          return ID_NAME;
        case 3: // COMPANY_ID
          return COMPANY_ID;
        case 4: // COMPANY_ID_NAME
          return COMPANY_ID_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID_NAME, new org.apache.thrift.meta_data.FieldMetaData("idName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPANY_ID_NAME, new org.apache.thrift.meta_data.FieldMetaData("companyIdName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(User.class, metaDataMap);
  }

  public User() {
  }

  public User(
    String id,
    String idName,
    String companyId,
    String companyIdName)
  {
    this();
    this.id = id;
    this.idName = idName;
    this.companyId = companyId;
    this.companyIdName = companyIdName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public User(User other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetIdName()) {
      this.idName = other.idName;
    }
    if (other.isSetCompanyId()) {
      this.companyId = other.companyId;
    }
    if (other.isSetCompanyIdName()) {
      this.companyIdName = other.companyIdName;
    }
  }

  public User deepCopy() {
    return new User(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.idName = null;
    this.companyId = null;
    this.companyIdName = null;
  }

  @org.apache.thrift.annotation.Nullable
  public String getId() {
    return this.id;
  }

  public User setId(@org.apache.thrift.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getIdName() {
    return this.idName;
  }

  public User setIdName(@org.apache.thrift.annotation.Nullable String idName) {
    this.idName = idName;
    return this;
  }

  public void unsetIdName() {
    this.idName = null;
  }

  /** Returns true if field idName is set (has been assigned a value) and false otherwise */
  public boolean isSetIdName() {
    return this.idName != null;
  }

  public void setIdNameIsSet(boolean value) {
    if (!value) {
      this.idName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getCompanyId() {
    return this.companyId;
  }

  public User setCompanyId(@org.apache.thrift.annotation.Nullable String companyId) {
    this.companyId = companyId;
    return this;
  }

  public void unsetCompanyId() {
    this.companyId = null;
  }

  /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyId() {
    return this.companyId != null;
  }

  public void setCompanyIdIsSet(boolean value) {
    if (!value) {
      this.companyId = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getCompanyIdName() {
    return this.companyIdName;
  }

  public User setCompanyIdName(@org.apache.thrift.annotation.Nullable String companyIdName) {
    this.companyIdName = companyIdName;
    return this;
  }

  public void unsetCompanyIdName() {
    this.companyIdName = null;
  }

  /** Returns true if field companyIdName is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyIdName() {
    return this.companyIdName != null;
  }

  public void setCompanyIdNameIsSet(boolean value) {
    if (!value) {
      this.companyIdName = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case ID_NAME:
      if (value == null) {
        unsetIdName();
      } else {
        setIdName((String)value);
      }
      break;

    case COMPANY_ID:
      if (value == null) {
        unsetCompanyId();
      } else {
        setCompanyId((String)value);
      }
      break;

    case COMPANY_ID_NAME:
      if (value == null) {
        unsetCompanyIdName();
      } else {
        setCompanyIdName((String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case ID_NAME:
      return getIdName();

    case COMPANY_ID:
      return getCompanyId();

    case COMPANY_ID_NAME:
      return getCompanyIdName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case ID_NAME:
      return isSetIdName();
    case COMPANY_ID:
      return isSetCompanyId();
    case COMPANY_ID_NAME:
      return isSetCompanyIdName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof User)
      return this.equals((User)that);
    return false;
  }

  public boolean equals(User that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_idName = true && this.isSetIdName();
    boolean that_present_idName = true && that.isSetIdName();
    if (this_present_idName || that_present_idName) {
      if (!(this_present_idName && that_present_idName))
        return false;
      if (!this.idName.equals(that.idName))
        return false;
    }

    boolean this_present_companyId = true && this.isSetCompanyId();
    boolean that_present_companyId = true && that.isSetCompanyId();
    if (this_present_companyId || that_present_companyId) {
      if (!(this_present_companyId && that_present_companyId))
        return false;
      if (!this.companyId.equals(that.companyId))
        return false;
    }

    boolean this_present_companyIdName = true && this.isSetCompanyIdName();
    boolean that_present_companyIdName = true && that.isSetCompanyIdName();
    if (this_present_companyIdName || that_present_companyIdName) {
      if (!(this_present_companyIdName && that_present_companyIdName))
        return false;
      if (!this.companyIdName.equals(that.companyIdName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetIdName()) ? 131071 : 524287);
    if (isSetIdName())
      hashCode = hashCode * 8191 + idName.hashCode();

    hashCode = hashCode * 8191 + ((isSetCompanyId()) ? 131071 : 524287);
    if (isSetCompanyId())
      hashCode = hashCode * 8191 + companyId.hashCode();

    hashCode = hashCode * 8191 + ((isSetCompanyIdName()) ? 131071 : 524287);
    if (isSetCompanyIdName())
      hashCode = hashCode * 8191 + companyIdName.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(User other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdName()).compareTo(other.isSetIdName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idName, other.idName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompanyIdName()).compareTo(other.isSetCompanyIdName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyIdName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyIdName, other.companyIdName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("User(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("idName:");
    if (this.idName == null) {
      sb.append("null");
    } else {
      sb.append(this.idName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("companyId:");
    if (this.companyId == null) {
      sb.append("null");
    } else {
      sb.append(this.companyId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("companyIdName:");
    if (this.companyIdName == null) {
      sb.append("null");
    } else {
      sb.append(this.companyIdName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UserStandardScheme getScheme() {
      return new UserStandardScheme();
    }
  }

  private static class UserStandardScheme extends org.apache.thrift.scheme.StandardScheme<User> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, User struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ID_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.idName = iprot.readString();
              struct.setIdNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMPANY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.companyId = iprot.readString();
              struct.setCompanyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMPANY_ID_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.companyIdName = iprot.readString();
              struct.setCompanyIdNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, User struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.idName != null) {
        oprot.writeFieldBegin(ID_NAME_FIELD_DESC);
        oprot.writeString(struct.idName);
        oprot.writeFieldEnd();
      }
      if (struct.companyId != null) {
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeString(struct.companyId);
        oprot.writeFieldEnd();
      }
      if (struct.companyIdName != null) {
        oprot.writeFieldBegin(COMPANY_ID_NAME_FIELD_DESC);
        oprot.writeString(struct.companyIdName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UserTupleScheme getScheme() {
      return new UserTupleScheme();
    }
  }

  private static class UserTupleScheme extends org.apache.thrift.scheme.TupleScheme<User> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, User struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetIdName()) {
        optionals.set(1);
      }
      if (struct.isSetCompanyId()) {
        optionals.set(2);
      }
      if (struct.isSetCompanyIdName()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetIdName()) {
        oprot.writeString(struct.idName);
      }
      if (struct.isSetCompanyId()) {
        oprot.writeString(struct.companyId);
      }
      if (struct.isSetCompanyIdName()) {
        oprot.writeString(struct.companyIdName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, User struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.idName = iprot.readString();
        struct.setIdNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.companyId = iprot.readString();
        struct.setCompanyIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.companyIdName = iprot.readString();
        struct.setCompanyIdNameIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

